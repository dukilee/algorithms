fenwick


typedef long long T;
T fen[100100] = {0};

void update(int p, T val, int n){
  for(int i = p; i<=n; i+=i&-i)
    fen[i]+=val;
}

T sum(int p){
  T ans = 0;
  for(int i = p; i; i-=i&-i)
    ans+=fen[i];
  return ans;
}
-------------------------------------------
heavy_light_decomposition


class HLD{
public:
	vi heavy, parent, depth, head;
	int dfs(vvi& grafo, int v){
		int size = 1;
		int maxSubtree = 0;
		for(auto u : grafo[v]){
			if(u == parent[v]) continue;
			parent[u] = v;
			depth[u] = depth[v]+1;
			int subtree = dfs(grafo, u);
			if(subtree>maxSubtree){
				maxSubtree = subtree;
				heavy[v] = u;
			}
		}
		return size;
	}

	int lca(int x, int y){
		while(head[x]!=head[y]){
			if(depth[head[x]]>depth[head[y]]) swap(x, y);
			y = parent[head[y]];
		}
		if(depth[x]>depth[y]) swap(x, y);
		return x;
	}

	HLD(vvi& grafo, int root){
		heavy.resize(grafo.size(), -1);
		parent.resize(grafo.size());
		depth.resize(grafo.size());
		head.resize(grafo.size());

		parent[root] = root;
		depth[root] = 0;
		head[root] = 0;
		dfs(grafo, root);

		for(int i = 0; i<grafo.size(); i++){
			if(parent[i] != i && heavy[parent[i]]==i) continue;
			for(int x = i; x!=-1; x = heavy[x]){
				head[x] = i;
			}
		}
	}
};

-------------------------------------------
lca


// GRAFO DE 1 a n;

int father[100100][20];
vi grafo[100100];
int logn;
int dept[100100];

void DFS(int x, int p){
  for(int i = 1 ; i<=logn; i++){
    father[x][i] = father[father[x][i-1]][i-1];
  }

  for(vi::iterator it = grafo[x].begin(); it!=grafo[x].end(); it++){
     if(*it == p) continue;
     father[*it][0] = x;
     dept[*it] = dept[x] + 1;
     DFS(*it, x);
  }
}

int goup(int a, int dist){
  for(int i = 0; dist; i++){
    if(dist & (1<<i)){
      a = father[a][i];
      dist -= 1<<i;
    }
  }
  return a;
}

int LCA(int a, int b){
  if(dept[a]<dept[b]) swap(a, b);
  a = goup(a, dept[a] - dept[b]);
  if(a==b) return a;
  for(int i = logn; i>=0; i--){
    if(father[a][i] != father[b][i]){
      a = father[a][i];
      b = father[b][i];
    }
  }
  return father[a][0];
}

void preLCA(int n /*quant vertex*/){
  logn = 0; 
  while((1<<(logn+1))<=n) logn++;
  dept[1] = 0;
  for(int i = 0; i<=logn; i++){
    father[0][i] = father[1][i] = 1;
  }
  DFS(1, 0);
}

-------------------------------------------
mo


// MO for [l, r]
struct Query{
  int l, r, p;
  //left, right, position
};
const int BLOCK_SIZE = 317; //sqrt(1e5)

int add(int x); // x is the element from the array
int del(int x); // x is the element from the array 

bool comp(Query a, Query b){
  if(a.l/BLOCK_SIZE != b.l/BLOCK_SIZE)
    return a.l/BLOCK_SIZE < b.l/BLOCK_SIZE;
  return a.r < b.r;
}

/**
* v -> vector where the queries are performed
* q -> queries
*/
void mo(vector<int>& v, vector<Query>& queries, vector<long long>& ans){
  int left, right;
  long long curr;

	for(int i = 0; i<queries.size(); i++){
    queries[i].p = i;
  }

  sort(queries.begin(), queries.end(), comp);

  left = right = queries[0].l;
  curr = add(v[left]); 
  for(auto q : queries){
    while(left<q.l){
      curr += del(v[left]);
      left++;
    }

    while(left>q.l){
      left--;
      curr += add(v[left]);
    }

    while(right<q.r){
      right++;
      curr += add(v[right]);
    }

    while(right>q.r){
      curr += del(v[right]);
      right--;
    }

    ans[q.p] = curr;
  }
}
-------------------------------------------
segment_tree



//indexed from 0
//n is not necessary power of 2

#define NULL_ELEMENT 0
typedef long long T;

class SegTree{
  public:
    int n;
    vector<T> tree;

    T op(T a, T b);

    void build(int node, int a, int b, vector<T>& v){
      if(a>b) return;
      if(a==b){
        tree[node] = v[a];
        return;
      }
      build(2*node, a, (a+b)/2, v);
      build(2*node+1, 1+(a+b)/2, b, v);
      tree[node] = op(tree[2*node], tree[2*node+1]);
    }

    void update(int node, int a, int b, int pos, T value){
      if(a==b){//leaf node
        tree[node] += value;
        return;
      }

      int m = (a+b)/2;
      if(pos<=m){
        update(2*node, a, m, pos, value);
      }else{
        update(2*node+1, m+1, b, pos, value);
      }
      tree[node] = op(tree[2*node], tree[2*node+1]);
    }

    /*Query in range [l, r]*/
    T query(int node, int a, int b, int l, int r){
      if(a>b || a>r || b<l)
        return NULL_ELEMENT;
      if(a>=l && b<=r) return tree[node];
      int m = (a+b)/2;
      T q1 =query(node*2, a, m, l, r);
      T q2 = query(node*2+1, m+1, b, l, r);
      return op(q1, q2);
    }

    void build(vector<T>& v){
      tree.resize(10+4*v.size());
      n = v.size();
      build(1, 0, n-1, v);
    }
    void update(int pos, T value){
      update(1, 0, n-1, pos, value);
    }
    T query(int l, int r){
      return query(1, 0, n-1, l, r);
    }
};

-------------------------------------------
treap


struct node{
	//BST in x
	//MINIMUM HEAP in y
	int x, y;
	node* left, *right;
};

node *root = NULL;

//LEFT is strictly smaller than cut
//RIGHT is greater or equal to cut
pair<node*, node*> split(node* n, int cut){
	if(n==NULL) return pair<node*, node*>(NULL, NULL);

	if(n->x>=cut){
		pair<node*, node*> aux = split(n->left, cut);
		n->left = aux.second;
		aux.second = n;
		return aux;
	}else{
		pair<node*, node*> aux = split(n->right, cut);
		n->right = aux.first;
		aux.first = n;
		return aux;
	}
}

node* merge(node* left, node* right){
	if(left == NULL) return right;
	if(right == NULL) return left;

	if(right->y < left->y){
		node* aux = merge(left, right->left);
		right->left = aux;
		return right;
	}else{
		node* aux = merge(left->right, right);
		left->right = aux;
		return left;
	}
}

void insert(int val){
	node* n;
	n = new node();
	n->x = val;
	n->y = random();
	n->left = n->right = NULL;

	pair<node*, node*> aux;
	node* l, *r;
	aux = split(root, val);
	l = aux.first;
	r = aux.second;

	root = merge(merge(l, n), r);
}

void eraseNode(node* n){
	if(n==NULL) return;
	eraseNode(n->left);
	eraseNode(n->right);
	delete n;
}

void remove(int val){
	node *n;
	pair<node*, node*> aux;
	node* l, *m, *r;
	aux = split(root, val);
	l = aux.first;
	m = aux.second;
	aux = split(m, val+1);
	m = aux.first;
	r = aux.second;
	root = merge(l, r);
	eraseNode(m);
}

bool find(int val){
	node *n;
	pair<node*, node*> aux;
	node* l, *m, *r;
	aux = split(root, val);
	l = aux.first;
	m = aux.second;
	aux = split(m, val+1);
	m = aux.first;
	r = aux.second;
	
	bool ans = m != NULL;
	root = merge(merge(l, m), r);
	return ans;
}

-------------------------------------------
